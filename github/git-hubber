#!/usr/bin/env python3

import os
import re
import sys
import json
import getopt
import getpass
import urllib.request
import urllib.error
import operator
import subprocess
from functools import reduce

def usage(msg=None):
    if msg:
        print(msg + "\n", file=sys.stderr)

    s = os.path.basename(__file__)
    print(_usage.format(script=s))
    sys.exit()

_usage = """\
usage: [PASS=...] %s [-p PASS] [-d passfd] [-H] COMMAND [args...]

COMMANDs:

  (*)   list-mine
        list-user        USER
        list-org         ORG
        dump-user        USER
        dump-org         ORG
        list-branches    OWNER REPO
        list-tags        OWNER REPO
        list-refs        OWNER REPO
  (*)   create-mine      REPO
  (*)   create-org       ORG   REPO
  (*)   fork-from        OWNER REPO
        list-forks       OWNER REPO
  (*)   delete           OWNER REPO
  (*)   rename           OWNER REPO NEWNAME
  (*)   set-description  OWNER REPO DESCRIPTION
  (*)   protect-branch   OWNER REPO BRANCH
  (*)   unprotect-branch OWNER REPO BRANCH
        list-prs         OWNER REPO
  (*)   request-pull     OWNER REPO:BRANCH USER:BRANCH TITLE BODY
  (*)   request-pull-for-issue \\
                         OWNER REPO:BRANCH USER:BRANCH ISSUE_NUM
  (*)   merge-pr         OWNER REPO NUMBER
  (*)   close-pr         OWNER REPO NUMBER
  (*)   list-hooks       OWNER REPO
  (*)   ping-hook        OWNER REPO HOOK_ID
        
(*) auth required

PASS (a github PAT) for auth is taken from the first of:
  1. -p PASS
  2. -d passfd (read from fd)
  3. read from $PASS env var

Options:
  -H   show http response headers
  -F field[:field...] display fields for repos instead of just "html_url"
     (valid fields are clone_url git_url html_url ssh_url full_name name, etc)
"""

apiurl = 'https://api.github.com'

GET    = 'GET'
PUT    = 'PUT'
POST   = 'POST'
PATCH  = 'PATCH'
DELETE = 'DELETE'

class Options:
    token = None
    show_headers = False
    listfields = ['html_url']

options = Options()

_accept = [
    "application/vnd.github.loki-preview+json",
    "application/vnd.github.mercy-preview+json",
    "application/vnd.github.v3+json",
]

def add_gh_preview_header(req):
    req.add_header("Accept", ", ".join(_accept))

def add_auth_header(req):
    if options.token:
        req.add_header("Authorization", "token %s" % options.token)

def getpw(pat, passfd=None):
    if pat:
        return pat
    elif passfd is not None:
        return os.fdopen(passfd).readline().rstrip('\n')
    elif 'PASS' in os.environ:
        return os.environ['PASS']

def json_pretty(data):
    return json.dumps(data, sort_keys=True, indent=2)

def linkparse(linktext):
    mm = re.findall(r'<([^>]+)>;\s*rel="([^"]+)"', linktext)
    return dict((page, rel) for rel,page in mm)

def get_nextlink(resp):
    linktext = resp.headers.getheader('link')
    if linktext:
        links = linkparse(linktext)
        if 'next' in links:
            return links['next']

def dump_resp_headers(method, url, data, resp):
    print("Response Headers for %s <%s>" % (method, url))
    if data:
        print("With data:")
        print(json_pretty(data))
    print("---")
    print(resp.headers)
    print()

def _snarfer(method, url, data=None):
    req = urllib.request.Request(url, data)
    add_auth_header(req)
    add_gh_preview_header(req)
    req.get_method = lambda : method
    resp = urllib.request.urlopen(req)
    if options.show_headers:
        dump_resp_headers(method, url, data, resp)
    nextlink = get_nextlink(resp)
    return resp.read(), nextlink

def snarfergen(method, url, data=None):
    while url:
        text, url = _snarfer(method, url, data)
        if text:
            j = json.loads(text)
            if type(j) is dict:
                pmsg(j)
            yield j
    
def snarfer(method, path, data=None):
    if data:
        data = json.dumps(data)
    url = apiurl + path
    outs = list(snarfergen(method, url, data))
    nresp = len(outs)
    if nresp == 0:
        return None
    elif nresp == 1:
        return outs[0]
    elif type(outs[0]) is list:
        return reduce(operator.add, outs)
    else:
        return outs

"""
github API notes:

: list-mine      GET /user/repos
: list-user      GET /users/:username/repos
: list-org       GET /orgs/:org/repos
: list-branches  GET /repos/:owner/:repo/branches
: list-tags      GET /repos/:owner/:repo/tags
: list-refs      GET /repos/:owner/:repo/git/refs  # aka git_refs_url
: create-mine    POST /user/repos      {"name": "Repo-Name"}
: create-org     POST /orgs/:org/repos {"name": "Repo-Name"}
: list-forks     GET /repos/:owner/:repo/forks
: fork-from      POST /repos/:owner/:repo/forks
: delete         DELETE /repos/:owner/:repo
: rename (edit)  PATCH /repos/:owner/:repo  {"name": "New-Repo-Name"}
: protect-branch PATCH /repos/:owner/:repo/branches/:branch {"enabled": "true"}
: request-pull   POST /repos/:owner/:repo/pulls {
                      "title": "New Feature", "body": "PR description",
                      "base": "master", "head": "someuser:somebranch"}
: request-pull-for-issue
                 POST /repos/:owner/:repo/pulls {
                      "base": "master", "head": "someuser:somebranch",
                      "issue": 123}
: merge-pr       PUT /repos/:owner/:repo/pulls/:number/merge
                 # {"commit_title": "title", "commit_message": "desc"}
: close-pr       PATCH /repos/:owner/:repo/pulls/:number {"state": "closed"}
: list-prs       GET /repos/:owner/:repo/pulls
: list-hooks     GET /repos/:owner/:repo/hooks
: ping-hook      POST /repos/:owner/:repo/hooks/:hook_id/pings
"""

def print_names(seq):
    m = max( len(x['name']) for x in seq )
    for x in seq:
        print("%-*s  %s" % (m, x['name'], x['html_url']))

def print_fields(seq):
    rows = sorted( [ x[f] for f in options.listfields ] for x in seq )
    for row in rows:
        print('\t'.join(map(str, row)))

def print_fields_sortby(seq, fields, sortby):
    rows = sorted( [x[sortby]] + [ x[f] for f in fields ] for x in seq )
    for row in rows:
        print('\t'.join(map(str, row[1:])))

def print_refs(seq):
    for x in seq:
        print(x["commit"]["sha"], x["name"])

def print_git_refs(seq):
    for x in seq:
        print(x["object"]["sha"], x["ref"])

def dump_infos(seq):
    for x in seq:
        print(x['html_url'])
        w = max(len(xx) for xx in x)
        for xk,xv in sorted(x.items()):
            print("  - %*s: %s" % (w,xk,xv))
        print()

def print_hook_info(seq):
    for hook in seq:
        print("%s: [%s] -> %s" % (hook['id'], ' | '.join(hook['events']),
                                  hook['config']['url']))

def pmsg(j):
    if j and 'message' in j:
        print(j['message'])

def list_mine():
    print_fields(snarfer(GET, '/user/repos'))

def list_user(username):
    print_fields(snarfer(GET, '/users/%s/repos' % username))

def list_prs(owner, repo):
    print_fields_sortby(snarfer(GET, '/repos/%s/%s/pulls' % (owner, repo)),
            ['html_url', 'title'], 'number')

def list_org(org):
    print_fields(snarfer(GET, '/orgs/%s/repos' % org))

def list_branches(owner, repo):
    print_refs(snarfer(GET, '/repos/%s/%s/branches' % (owner,repo)))

def list_tags(owner, repo):
    print_refs(snarfer(GET, '/repos/%s/%s/tags' % (owner,repo)))

def list_git_refs(owner, repo):
    print_git_refs(snarfer(GET, '/repos/%s/%s/git/refs' % (owner,repo)))

def dump_user(username):
    dump_infos(snarfer(GET, '/users/%s/repos' % username))

def dump_org(org):
    dump_infos(snarfer(GET, '/orgs/%s/repos' % org))

def create_mine(repo):
    snarfer(POST, '/user/repos', {"name": repo})

def create_org(org, repo):
    snarfer(POST, '/orgs/%s/repos' % org, {"name": repo})

def fork_mine(owner, repo):
    snarfer(POST, '/repos/%s/%s/forks' % (owner,repo))

def list_forks(owner, repo):
    print_fields(snarfer(GET, '/repos/%s/%s/forks' % (owner, repo)))

def delete_repo(owner, repo):
    snarfer(DELETE, '/repos/%s/%s' % (owner,repo))

def rename_repo(owner, repo, newname):
    snarfer(PATCH, '/repos/%s/%s' % (owner,repo), {"name": newname})

def set_description(owner, repo, desc):
    snarfer(PATCH, '/repos/%s/%s' % (owner,repo),
           {"name": repo, "description": desc})

def protect_branch(owner, repo, branch):
    data = {
        "protection": {
            "enabled": True,
            "required_status_checks": {
                "enforcement_level": "everyone",  # or "non_admins", or "off"
                "contexts": []  # eg, "continuous-integration/travis-ci"
            }
        }
    }
    snarfer(PATCH, '/repos/%s/%s/branches/%s' % (owner,repo,branch), data)

def unprotect_branch(owner, repo, branch):
    snarfer(PATCH, '/repos/%s/%s/branches/%s' % (owner,repo,branch),
           {"protection": {"enabled": False}})

def merge_pr(owner, repo, number):
    snarfer(PUT, "/repos/%s/%s/pulls/%s/merge" % (owner, repo, number))

def close_pr(owner, repo, number):
    snarfer(PATCH, "/repos/%s/%s/pulls/%s" % (owner, repo, number),
           {"state": "closed"})

def request_pull_kw(owner, repo_base, head, **kw):
    repo, base = repo_base.split(':')
    data = dict(head=head, base=base, **kw)
    print_fields([snarfer(POST, '/repos/%s/%s/pulls' % (owner,repo), data)])

def request_pull(owner, repo_base, head, title, body):
    request_pull_kw(owner, repo_base, head, title=title, body=body)

def request_pull_for_issue(owner, repo_base, head, issue):
    request_pull_kw(owner, repo_base, head, issue=int(issue))

def list_hooks(owner, repo):
    print_hook_info(snarfer(GET, '/repos/%s/%s/hooks' % (owner, repo)))

def ping_hook(owner, repo, hook_id):
    snarfer(POST, "/repos/%s/%s/hooks/%s/pings" % (owner, repo, hook_id))

methods = {
#   'command-name':     [method,   auth_required],
    'list-mine':        [list_mine,        True],
    'list-user':        [list_user,        False],
    'list-org':         [list_org,         False],
    'dump-user':        [dump_user,        False],
    'dump-org':         [dump_org,         False],
    'list-branches':    [list_branches,    False],
    'list-tags':        [list_tags,        False],
    'list-refs':        [list_git_refs,    False],
    'create-mine':      [create_mine,      True],
    'create-org':       [create_org,       True],
    'fork-from':        [fork_mine,        True],
    'list-forks':       [list_forks,       False],
    'delete':           [delete_repo,      True],
    'rename':           [rename_repo,      True],
    'set-description':  [set_description,  True],
    'protect-branch':   [protect_branch,   True],
    'unprotect-branch': [unprotect_branch, True],
    'request-pull':     [request_pull,     True],
    'list-prs':         [list_prs,         False],
    'merge-pr':         [merge_pr,         True],
    'close-pr':         [close_pr,         True],
    'list-hooks':       [list_hooks,       True],
    'ping-hook':        [ping_hook,        True],
    'request-pull-for-issue': [request_pull_for_issue, True],
}

def checkfields(f):
    if not f:
        usage()
    fields = f.split(':')
    if not all( re.search(r'^\w+$', x) for x in fields ):
        usage()
    return fields

def method_argcount_ok(method, args):
    cmd_args = method.__code__.co_argcount
    def_args = len(method.__defaults__ or [])
    return cmd_args - def_args <= len(args) <= cmd_args

def main(args):
    ops, args = getopt.getopt(args, 'p:d:HF:')
    ops = dict(ops)
    if len(args) < 1:
        usage()

    pat    = None
    passfd = None

    if '-p' in ops: pat    =     ops['-p']
    if '-d' in ops: passfd = int(ops['-d'])
    if '-H' in ops: options.show_headers = True
    if '-F' in ops: options.listfields = checkfields(ops['-F'])

    command = args[0]
    args = args[1:]

    if command not in methods:
        usage("unrecognized command: '%s'" % command)

    method, auth_required = methods[command]

    if not method_argcount_ok(method, args):
        usage("wrong number of args for %s command" % command)

    options.token = getpw(pat)
    if auth_required and not options.token:
        usage("PASS required for %s command" % command)

    method(*args)

def dump_http_error(e):
    print(e, file=sys.stderr)
    print("", file=sys.stderr)
    if options.show_headers:
        print(e.headers, file=sys.stderr)
        print("", file=sys.stderr)
    data = e.read()
    if e.headers.gettype() == 'application/json':
        data = json.loads(data) if data else None
    print(json_pretty(data), file=sys.stderr)

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except urllib.error.HTTPError as e:
        dump_http_error(e)
        sys.exit(1)

